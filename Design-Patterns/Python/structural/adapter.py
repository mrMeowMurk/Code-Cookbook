"""
Паттерн Adapter (Адаптер)

Паттерн Adapter позволяет объектам с несовместимыми интерфейсами работать вместе.
Он оборачивает объект с несовместимым интерфейсом в адаптер, который делает его
совместимым с другим интерфейсом.

Применение:
- Когда вы хотите использовать существующий класс, но его интерфейс не соответствует вашим потребностям
- Когда вы хотите создать повторно используемый класс, который сотрудничает с классами,
  которые могут иметь несовместимые интерфейсы
- Когда вам нужно использовать несколько существующих подклассов, но непрактично
  адаптировать их интерфейс путем создания подклассов для каждого

Преимущества:
+ Позволяет объектам с несовместимыми интерфейсами работать вместе
+ Соблюдает принцип единственной ответственности
+ Соблюдает принцип открытости/закрытости

Недостатки:
- Усложняет код из-за введения дополнительных классов
- Может быть сложно реализовать, если интерфейсы сильно различаются
"""

from abc import ABC, abstractmethod


class Target(ABC):
    """
    Целевой интерфейс, который ожидает клиент.
    """
    @abstractmethod
    def request(self) -> str:
        """Стандартный запрос."""
        pass


class Adaptee:
    """
    Адаптируемый класс с несовместимым интерфейсом.
    """
    def specific_request(self) -> str:
        """Специфический запрос."""
        return "Adaptee: специфический запрос"


class Adapter(Target):
    """
    Адаптер, который делает интерфейс Adaptee совместимым с Target.
    """
    def __init__(self, adaptee: Adaptee):
        self.adaptee = adaptee

    def request(self) -> str:
        """
        Преобразует специфический запрос в стандартный.
        
        Returns:
            str: Результат запроса
        """
        result = self.adaptee.specific_request()
        return f"Adapter: (переведено) {result}"


def client_code(target: Target) -> None:
    """
    Клиентский код, который работает с Target объектами.
    
    Args:
        target (Target): Целевой объект
    """
    print(target.request())


# Пример использования
if __name__ == "__main__":
    print("Клиент: Я могу работать с Target объектами:")
    target = Target()
    client_code(target)
    print()

    adaptee = Adaptee()
    print("Клиент: Adaptee класс имеет странный интерфейс. Я не понимаю его:")
    print(f"Adaptee: {adaptee.specific_request()}")
    print()

    print("Клиент: Но я могу работать с ним через Adapter:")
    adapter = Adapter(adaptee)
    client_code(adapter) 