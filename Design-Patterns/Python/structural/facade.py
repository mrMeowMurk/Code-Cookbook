"""
Паттерн Facade (Фасад)

Паттерн Facade предоставляет упрощенный интерфейс к сложной подсистеме классов,
библиотеке или фреймворку. Он скрывает сложность подсистемы и предоставляет
клиенту простой интерфейс для работы с ней.

Применение:
- Когда нужно предоставить простой интерфейс к сложной подсистеме
- Когда нужно разложить подсистему на отдельные слои
- Когда нужно уменьшить зависимости между клиентом и подсистемой
- Когда нужно упростить использование подсистемы

Преимущества:
+ Изолирует клиентов от компонентов подсистемы
+ Уменьшает связность между клиентом и подсистемой
+ Упрощает использование подсистемы
+ Соблюдает принцип единственной ответственности

Недостатки:
- Может стать "божественным объектом"
- Может скрыть важную функциональность подсистемы
- Может быть сложно поддерживать, если подсистема меняется
"""


class SubsystemA:
    """
    Подсистема A.
    """
    def operation_a(self) -> str:
        """Операция A."""
        return "SubsystemA: операция A"


class SubsystemB:
    """
    Подсистема B.
    """
    def operation_b(self) -> str:
        """Операция B."""
        return "SubsystemB: операция B"


class SubsystemC:
    """
    Подсистема C.
    """
    def operation_c(self) -> str:
        """Операция C."""
        return "SubsystemC: операция C"


class Facade:
    """
    Фасад, предоставляющий упрощенный интерфейс к подсистемам.
    """
    def __init__(self):
        self._subsystem_a = SubsystemA()
        self._subsystem_b = SubsystemB()
        self._subsystem_c = SubsystemC()

    def operation(self) -> str:
        """
        Выполняет операцию через фасад.
        
        Returns:
            str: Результат операции
        """
        result = "Facade инициализирует подсистемы:\n"
        result += self._subsystem_a.operation_a() + "\n"
        result += self._subsystem_b.operation_b() + "\n"
        result += self._subsystem_c.operation_c()
        return result


# Пример использования
if __name__ == "__main__":
    facade = Facade()
    print(facade.operation()) 