"""
Паттерн State (Состояние)

Паттерн State позволяет объекту изменять свое поведение в зависимости от внутреннего состояния.
Объект будет вести себя по-разному в зависимости от того, в каком состоянии он находится.

Применение:
- Когда поведение объекта зависит от его состояния
- Когда в коде есть множество условных операторов, которые проверяют состояние объекта
- Когда нужно реализовать конечный автомат
- Когда нужно реализовать механизм переключения состояний

Преимущества:
+ Упрощает код
+ Уменьшает количество условных операторов
+ Упрощает добавление новых состояний
+ Соблюдает принцип единственной ответственности

Недостатки:
- Может привести к созданию большого количества классов
- Может быть сложно отладить
- Может быть сложно реализовать для сложных объектов
"""

from abc import ABC, abstractmethod


class State(ABC):
    """
    Базовый класс состояния.
    """
    @abstractmethod
    def handle(self) -> None:
        """
        Обрабатывает запрос.
        """
        pass


class Context:
    """
    Контекст.
    """
    def __init__(self, state: State):
        self._state = state

    def set_state(self, state: State) -> None:
        """
        Устанавливает состояние.
        
        Args:
            state (State): Состояние
        """
        self._state = state

    def request(self) -> None:
        """
        Обрабатывает запрос.
        """
        self._state.handle()


class ConcreteStateA(State):
    """
    Конкретное состояние A.
    """
    def handle(self) -> None:
        """
        Обрабатывает запрос.
        """
        print("Обработка в состоянии A")


class ConcreteStateB(State):
    """
    Конкретное состояние B.
    """
    def handle(self) -> None:
        """
        Обрабатывает запрос.
        """
        print("Обработка в состоянии B")


# Пример использования
if __name__ == "__main__":
    # Создаем контекст с начальным состоянием A
    context = Context(ConcreteStateA())

    # Обрабатываем запрос в состоянии A
    context.request()

    # Меняем состояние на B
    context.set_state(ConcreteStateB())

    # Обрабатываем запрос в состоянии B
    context.request() 